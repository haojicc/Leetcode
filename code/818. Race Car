/**
Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions.
Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):
When you get an instruction 'A', your car does the following:
position += speed
speed *= 2
When you get an instruction 'R', your car does the following:
If your speed is positive then speed = -1
otherwise speed = 1
Your position stays the same.
For example, after commands "AAR", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.
Given a target position target, return the length of the shortest sequence of instructions to get there.
 */

#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
#include "unordered_map"
#include <unordered_set>
#include <queue>
#include <numeric>

using namespace std;

class Solution_BFS {
public:
    int racecar(int target){
        queue<pair<int, int>> q;//pair<int pos, int speed>
        q.push({0, 1});
        unordered_set<string> seen;//string := pos_speed
        seen.insert("0_1");
        int steps = 1;

        while(!q.empty()){
            int size = q.size();
            while(size--){
                auto cur = q.front();
                q.pop();
                int pos = cur.first;
                int speed = cur.second;

                int pos1 = pos + speed;
                int speed1 = 2 * speed;
                if(pos1 == target){
                    return steps;
                }
                string case1 = to_string(pos1) + "_" + to_string(speed1);
                if(!seen.count(case1) && pos1 > 0 && pos1 < 2 * target){
                    q.push({pos1, speed1});
                    seen.insert(case1);
                }

                int speed2 = speed > 0 ? -1 : 1;
                string case2 = to_string(pos) + "_" + to_string(speed2);
                if(!seen.count(case2)){
                    q.push({pos, speed2});
                    seen.insert(case2);
                }
            }
            steps++;
        }
        return -1;
    }
};

class Solution_DP{
public:
    int racecar(int target){

    }
};

int main() {
    Solution_BFS obj;
    int resBFS = obj.racecar(6);

    cout << resBFS << endl;
}
