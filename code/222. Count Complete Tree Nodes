
Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Design an algorithm that runs in less than O(n) time complexity.

Example 1:
Input: root = [1,2,3,4,5,6]
Output: 6

Example 2:
Input: root = []
Output: 0

Example 3:
Input: root = [1]
Output: 1

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(root == nullptr) return 0;
        int l = height(root->left);
        int r = height(root->right);
        
        if(l == r){
            return countNodes(root->right) + (1 << l);
        }else{
            return countNodes(root->left) + (1 << r);
        }
    }
    
private:
    int height(TreeNode* root){
        if(root == nullptr) return 0;
        return height(root->left) + 1;
    }//Beacuse the binary tree is complete binary tree.
};


/*
If the height of left and right are equal, left child tree is a full-tree.
So the number of the node of left child tree and root are 2^height(left child tree).

If the height of left ans right aren't equal, right child tree is a full-tree.
So the number of the node of right child tree and root are w^height(right child tree).

*/
