/**
Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence 
 where each word is a valid dictionary word. Return all such possible sentences in any order.
 */

#include <iostream>
#include <vector>
#include <stack>
#include "unordered_map"
#include <unordered_set>
#include <numeric>

using namespace std;

class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        return wordBreak_h(s,dict);
    }

private:
    vector<string> append(const vector<string>& prefixes, const string& word){
        vector<string> results;
        for(const auto& prefix: prefixes){
            results.push_back(prefix + " " + word);
        }
        return results;
    }

    vector<string>& wordBreak_h(string s, unordered_set<string>& dict){
        if(mem_.count(s)){
            return mem_[s];
        }

        vector<string> ans;
        if(dict.count(s)){
            ans.push_back(s);
        }

        for(int i = 1; i < s.length(); i++){
            string right = s.substr(i);
            if(!dict.count(right)){
                continue;
            }

            string left = s.substr(0, i);
            vector<string> leftAns = append(wordBreak_h(left, dict), right);

            ans.insert(ans.end(), leftAns.begin(), leftAns.end());
        }

        mem_[s] = ans;
        return mem_[s];
    }

private:
    unordered_map<string, vector<string>> mem_;
};


int main() {
    Solution obj;
    string s = "catsanddog";
    vector<string> wordDict {"cat","cats","and","sand","dog"};
    vector<string>  res = obj.wordBreak(s,wordDict);

    for(auto item: res){
        cout << item << endl;
    }

}
